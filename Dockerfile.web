# Оптимизированный Dockerfile для Web на Railway
FROM node:18-alpine AS base

FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install pnpm
RUN npm install -g pnpm

# Copy only necessary files for dependency installation
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY apps/web/package.json ./apps/web/
COPY packages/ui/package.json ./packages/ui/

# Install only web dependencies
RUN pnpm install --frozen-lockfile --filter=@questai/web --filter=@questai/ui

# Build stage
FROM base AS builder
WORKDIR /app

# Copy dependencies
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/apps/web/node_modules ./apps/web/node_modules
COPY --from=deps /app/packages/ui/node_modules ./packages/ui/node_modules

# Copy source code
COPY apps/web ./apps/web
COPY packages/ui ./packages/ui
COPY tsconfig.base.json tsconfig.json ./

# Build time environment variables
ENV NEXT_PUBLIC_SUPABASE_URL=https://placeholder.supabase.co
ENV NEXT_PUBLIC_SUPABASE_ANON_KEY=placeholder_key
ENV NEXT_PUBLIC_API_URL=http://localhost:3001

# Install pnpm in builder
RUN npm install -g pnpm

# Build UI package first
RUN cd packages/ui && pnpm run build

# Build Next.js app
RUN cd apps/web && pnpm run build

# Production stage
FROM base AS runner
WORKDIR /app

ENV NODE_ENV production

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy necessary files from builder
COPY --from=builder /app/apps/web/public ./public
COPY --from=builder /app/apps/web/.next/standalone ./
COPY --from=builder /app/apps/web/.next/static ./.next/static

# Fix permissions
RUN chown -R nextjs:nodejs ./

USER nextjs

EXPOSE 3000

CMD ["node", "server.js"]
