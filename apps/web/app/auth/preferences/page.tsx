"use client";

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { MainHeader } from '@/components/layout/MainHeader';
import { MainFooter } from '@/components/layout/MainFooter';
import { supabase } from '@/lib/supabase';

// –¢–∏–ø—ã –¥–ª—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
interface UserPreferences {
  questStyle: string;
  difficulty: string;
  motivation: string;
  purpose: string;
  step: number;
}

export default function PreferencesPage() {
  const router = useRouter();
  const [user, setUser] = useState<{ id: string } | null>(null);
  const [loading, setLoading] = useState(true);
  const [preferences, setPreferences] = useState<UserPreferences>({
    questStyle: '',
    difficulty: '',
    motivation: '',
    purpose: '',
    step: 1,
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    const fetchUser = async () => {
      const { data: { session }, error } = await supabase.auth.getSession();
      
      if (error || !session) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
        router.push('/auth');
        return;
      }
      
      setUser(session.user);
      setLoading(false);
    };

    fetchUser();
  }, [router]);

  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
  const updatePreference = (key: keyof UserPreferences, value: string) => {
    setPreferences((prev) => ({
      ...prev,
      [key]: value,
    }));
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
  const nextStep = () => {
    if (preferences.step < 4) {
      setPreferences((prev) => ({
        ...prev,
        step: prev.step + 1,
      }));
    } else {
      savePreferencesAndContinue();
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É
  const prevStep = () => {
    if (preferences.step > 1) {
      setPreferences((prev) => ({
        ...prev,
        step: prev.step - 1,
      }));
    }
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç–∫—Ä–∞–Ω—É
  const savePreferencesAndContinue = async () => {
    if (!user) return;
    
    setLoading(true);
    
    try {
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ—Ñ–∏–ª—å
      const { error } = await supabase
        .from('profiles')
        .upsert({
          id: user.id,
          preferences: {
            questStyle: preferences.questStyle,
            difficulty: preferences.difficulty,
            motivation: preferences.motivation,
            purpose: preferences.purpose,
          },
          // –ü–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ–º onboarding, —Ç–∞–∫ –∫–∞–∫ –Ω—É–∂–Ω–æ –µ—â–µ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
          completed_onboarding: false, 
          updated_at: new Date().toISOString(),
        });

      if (error) throw error;
      
      // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
      router.push('/auth/profile');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π:', error);
    } finally {
      setLoading(false);
    }
  };

  const renderStepContent = () => {
    switch (preferences.step) {
      case 1:
        return (
          <div className="space-y-6">
            <h2 className="text-2xl font-semibold text-[#2553A1] text-center">
              –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Å—Ç–∏–ª—å –∫–≤–µ—Å—Ç–æ–≤
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {[
                { id: 'fantasy', name: '–§—ç–Ω—Ç–µ–∑–∏', icon: 'üßô‚Äç‚ôÇÔ∏è', description: '–ú–∞–≥–∏—è, –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è, –≥–µ—Ä–æ–∏ –∏ –∑–ª–æ–¥–µ–∏ –≤ –≤–æ–ª—à–µ–±–Ω—ã—Ö –º–∏—Ä–∞—Ö' },
                { id: 'scifi', name: '–ù–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞', icon: 'üöÄ', description: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –±—É–¥—É—â–µ–≥–æ, –∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏ –∏–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–µ' },
                { id: 'realism', name: '–†–µ–∞–ª–∏–∑–º', icon: 'üèôÔ∏è', description: '–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏' },
              ].map((style) => (
                <Card 
                  key={style.id}
                  className={`cursor-pointer transition-all ${
                    preferences.questStyle === style.id 
                      ? 'border-[#2553A1] shadow-md ring-2 ring-[#2553A1]' 
                      : 'border-gray-200 hover:border-gray-300'
                  }`}
                  onClick={() => updatePreference('questStyle', style.id)}
                >
                  <CardContent className="p-6 text-center">
                    <div className="text-4xl mb-4">{style.icon}</div>
                    <h3 className="text-lg font-medium mb-2">{style.name}</h3>
                    <p className="text-sm text-gray-600">{style.description}</p>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        );
      
      case 2:
        return (
          <div className="space-y-6">
            <h2 className="text-2xl font-semibold text-[#2553A1] text-center">
              –ö–∞–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞?
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {[
                { id: 'beginner', name: '–ù–æ–≤–∏—á–æ–∫', icon: 'üå±', description: '–ü—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö' },
                { id: 'adventurer', name: '–ò—Å–∫–∞—Ç–µ–ª—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π', icon: '‚öîÔ∏è', description: '–ó–∞–¥–∞—á–∏ —Å—Ä–µ–¥–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ –≤—ã–∑–æ–≤–∞–º–∏' },
                { id: 'heroic', name: '–ì–µ—Ä–æ–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º', icon: 'üëë', description: '–°–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –Ω–∞—Å—Ç–æ—è—â–∏—Ö –≥–µ—Ä–æ–µ–≤' },
              ].map((difficulty) => (
                <Card 
                  key={difficulty.id}
                  className={`cursor-pointer transition-all ${
                    preferences.difficulty === difficulty.id 
                      ? 'border-[#2553A1] shadow-md ring-2 ring-[#2553A1]' 
                      : 'border-gray-200 hover:border-gray-300'
                  }`}
                  onClick={() => updatePreference('difficulty', difficulty.id)}
                >
                  <CardContent className="p-6 text-center">
                    <div className="text-4xl mb-4">{difficulty.icon}</div>
                    <h3 className="text-lg font-medium mb-2">{difficulty.name}</h3>
                    <p className="text-sm text-gray-600">{difficulty.description}</p>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        );
      
      case 3:
        return (
          <div className="space-y-6">
            <h2 className="text-2xl font-semibold text-[#2553A1] text-center">
              –ß—Ç–æ –≤–∞—Å –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç?
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {[
                { id: 'achievements', name: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', icon: 'üèÜ', description: '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π' },
                { id: 'progress', name: '–ü—Ä–æ–≥—Ä–µ—Å—Å', icon: 'üìà', description: '–í–∏–¥–µ—Ç—å —Å–≤–æ–π —Ä–æ—Å—Ç –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º' },
                { id: 'competition', name: '–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ', icon: 'ü•á', description: '–°–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –∏ —Å—Ç—Ä–µ–º–∏—Ç—å—Å—è –∫ –ª–∏–¥–µ—Ä—Å—Ç–≤—É' },
              ].map((motivation) => (
                <Card 
                  key={motivation.id}
                  className={`cursor-pointer transition-all ${
                    preferences.motivation === motivation.id 
                      ? 'border-[#2553A1] shadow-md ring-2 ring-[#2553A1]' 
                      : 'border-gray-200 hover:border-gray-300'
                  }`}
                  onClick={() => updatePreference('motivation', motivation.id)}
                >
                  <CardContent className="p-6 text-center">
                    <div className="text-4xl mb-4">{motivation.icon}</div>
                    <h3 className="text-lg font-medium mb-2">{motivation.name}</h3>
                    <p className="text-sm text-gray-600">{motivation.description}</p>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        );
      
      case 4:
        return (
          <div className="space-y-6">
            <h2 className="text-2xl font-semibold text-[#2553A1] text-center">
              –î–ª—è –∫–∞–∫–∏—Ö –∑–∞–¥–∞—á –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å QuestAI?
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {[
                { id: 'work', name: '–†–∞–±–æ—Ç–∞', icon: 'üíº', description: '–†–∞–±–æ—á–∏–µ –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–æ–µ–∫—Ç—ã' },
                { id: 'study', name: '–£—á–µ–±–∞', icon: 'üìö', description: '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–ª–∏ –∏ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ' },
                { id: 'personal', name: '–õ–∏—á–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã', icon: 'üè°', description: '–•–æ–±–±–∏, —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ –∏ –¥–æ–º–∞—à–Ω–∏–µ –¥–µ–ª–∞' },
              ].map((purpose) => (
                <Card 
                  key={purpose.id}
                  className={`cursor-pointer transition-all ${
                    preferences.purpose === purpose.id 
                      ? 'border-[#2553A1] shadow-md ring-2 ring-[#2553A1]' 
                      : 'border-gray-200 hover:border-gray-300'
                  }`}
                  onClick={() => updatePreference('purpose', purpose.id)}
                >
                  <CardContent className="p-6 text-center">
                    <div className="text-4xl mb-4">{purpose.icon}</div>
                    <h3 className="text-lg font-medium mb-2">{purpose.name}</h3>
                    <p className="text-sm text-gray-600">{purpose.description}</p>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        );
      
      default:
        return null;
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-[#F7F9FB]">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-[#2553A1]"></div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-[#F7F9FB] flex flex-col">
      <MainHeader />
      <main className="flex-grow container mx-auto max-w-4xl px-4 py-8 pt-24">
        <div className="bg-white p-6 md:p-8 rounded-lg shadow-md">
          <div className="mb-8">
            <div className="relative w-full h-2 bg-gray-200 rounded-full overflow-hidden">
              <div 
                className="absolute top-0 left-0 h-full bg-[#22B07D] rounded-full transition-all duration-300"
                style={{ width: `${(preferences.step / 4) * 100}%` }}
              ></div>
            </div>
            <div className="flex justify-between mt-2 text-xs text-gray-500">
              <span>–®–∞–≥ {preferences.step} –∏–∑ 4</span>
              <span>{Math.round((preferences.step / 4) * 100)}%</span>
            </div>
          </div>

          {renderStepContent()}

          <div className="flex justify-between mt-8">
            <Button
              variant="outline"
              onClick={prevStep}
              disabled={preferences.step === 1}
              className="px-6"
            >
              –ù–∞–∑–∞–¥
            </Button>

            <Button
              onClick={nextStep}
              disabled={
                (preferences.step === 1 && !preferences.questStyle) ||
                (preferences.step === 2 && !preferences.difficulty) ||
                (preferences.step === 3 && !preferences.motivation) ||
                (preferences.step === 4 && !preferences.purpose) ||
                loading
              }
              className="bg-[#22B07D] hover:bg-[#22B07D]/90 text-white px-6"
            >
              {preferences.step < 4 ? '–î–∞–ª–µ–µ' : '–ó–∞–≤–µ—Ä—à–∏—Ç—å'}
            </Button>
          </div>
        </div>
      </main>
      <MainFooter />
    </div>
  );
}
